@page "/passwordentry/{vPage}"
@using DigiEquipSys.Interfaces
@using DigiEquipSys.Models
@using Syncfusion.Blazor.Inputs
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IBranchService myBranchservice
@inject IJSRuntime JSRuntime
@inject ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
@inject ISysPagesControlService mySysPagesControlService
@inject ISystemPagesService mySystemPageService

<h3>Password Entry Form</h3>

<style>
    .password-box {
        width: 250px;
    }

    .eye-btn {
        background: none;
        border: none;
        cursor: pointer;
        margin-left: -30px;
    }

    .submit-btn {
        margin-top: 10px;
        background-color: #4CAF50;
        color: white;
        padding: 8px 12px;
        border: none;
        cursor: pointer;
    }

    .success-message {
        color: green;
        font-weight: bold;
    }
</style>

<SfSpinner @bind-Visible="@SpinnerVisible" Type="@SpinnerType.Bootstrap4" Size="50" Label="Data loading">
</SfSpinner>

<EditForm Model="@userModel" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator />
    <div>
        <label>Password:</label>
        <SfTextBox @bind-Value="@userModel.Password" Type="@passwordType" Placeholder="Enter your password" CssClass="password-box" ShowClearButton="true" Width="300px">
        </SfTextBox>
        <button type="button" @onclick="TogglePasswordVisibility" class="eye-btn">
            <i class="@eyeIcon"></i>
        </button>
        <ValidationMessage For="@(() => userModel.Password)" />
    </div>

    <button type="submit" class="submit-btn">Submit</button>
</EditForm>

@* @if (!submitted)
{
    <p class="success-message">Invalid Passwork Key!</p>
} *@

@code {

    [CascadingParameter]
    public EventCallback notify { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }

    [Parameter]
    public string vPage { get; set; }

    public bool SpinnerVisible { get; set; } = false;
    private string? myLoc;
    protected List<Branch> BranchList = new();

    protected List<SystemPage> SystemPagesList = new();
    protected SysPagesControl myPageControl = new();
    private string? vUser;
    private IDisposable? LocationChangingHandler;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            myLoc = await sessionStorage.GetItemAsync<string>("adminLoc");
            this.SpinnerVisible = true;
            BranchList = await myBranchservice.GetBranches();
            this.SpinnerVisible = false;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
            return;
        }

        LocationChangingHandler = NavigationManager.RegisterLocationChangingHandler(async context =>
        {
            // Check for unsaved changes
            if (HasUnsavedChanges()==false)
            {
                var isConfirmed = await JSRuntime.InvokeAsync<bool>("window.confirm", "Don't use Browser Back Button...");
                if (!isConfirmed)
                {
                    context.PreventNavigation(); 
                    // Cancel navigation
                }
                else
                {
                    context.PreventNavigation();
                }
            }
            Dispose();
            NavigationManager.NavigateTo("index");

        });
    }

    private bool HasUnsavedChanges()
    {
        // Replace with actual logic to check for unsaved changes
        if (submitted == true)
            return true;
        else
            return false;
    }

    public void Dispose()
    {
        // Unregister the handler to avoid memory leaks
        LocationChangingHandler?.Dispose();
    }


    private UserModel userModel = new UserModel();
    private bool submitted = false;
    private InputType passwordType = InputType.Password;
    private string eyeIcon = "fas fa-eye-slash";

    private void TogglePasswordVisibility()
    {
        if (passwordType == InputType.Password)
        {
            passwordType = InputType.Text;
            eyeIcon = "fas fa-eye";
        }
        else
        {
            passwordType = InputType.Password;
            eyeIcon = "fas fa-eye-slash";
        }
    }

    private async Task SubmitForm()
    {
        var qry = (from x in BranchList where x.SetupPassword == @userModel.Password select x).ToList();
        if (qry != null && qry.Count() > 0)
        {
            vUser = await sessionStorage.GetItemAsync<string>("adminEmail");
            SystemPagesList = await mySystemPageService.GetSystemPages("Acc");
            int myPageId = (from x in SystemPagesList where x.PageUrl.ToLower() == vPage.ToLower().Trim() select x.PageId).FirstOrDefault();
            if (myPageId > 0)
            {
                myPageControl = await mySysPagesControlService.GetSysPagesControls(vUser, myPageId);
                if (myPageControl != null)
                {
                    if (myPageControl.SysPagesId == 404)
                    {
                        submitted = false;
                        await JSRuntime.InvokeVoidAsync("alert", "You are Not Authorized");

                    }
                    else
                    {
                        submitted = true;
                        NavigationManager.NavigateTo(vPage);
                    }
                }
                else
                {
                    submitted = false;
                    await JSRuntime.InvokeVoidAsync("alert", "You are Not Authorized");
                }
            }
        }
        else
        {
            submitted = false;
        }
    }

    public class UserModel
    {
        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; }
    }
}