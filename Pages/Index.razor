@page "/index"
@inject ISessionStorageService sessionStorage
@inject NavigationManager navManager
@using DigiEquipSys.Interfaces
@using DigiEquipSys.Models
@using DigiEquipSys.Services
@using System
@using System.Globalization
@using System.Linq
@using System.Collections.Generic;
@inject AccYear accYear
@inject IStockService myStockService
@inject IStockTransService myStockTransService
@inject IJSRuntime JSRuntime
@inject IGroupMasterService myGroupMaster
@inject IClientService myClientService
@inject IItemMasterService myItemMasterService
@inject IvwReceiptService myvwReceiptService
@inject IvwSaleService myvwSaleService
@inject IvwTransferService myvwTransferService
@inject ITrDetailService myTrDetailService
@inject ICommChargeService myCommChargeService
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
<PageTitle>Index</PageTitle>
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons

<SfSpinner @bind-Visible="@SpinnerVisible" Type="@SpinnerType.Bootstrap4" Size="50" Label="Data loading">
</SfSpinner>

@if (iam == "01")
{
<div style="display: flex; justify-content: center; margin-top: 10px;">
    <div style="display: flex; align-items: center; gap: 10px;">
        <label style="white-space: nowrap;">Common Change Date</label>
        <SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="250px"
                           @bind-StartDate="@selectedRangeAll.selectedRangeFromAll"
                           @bind-EndDate="@selectedRangeAll.selectedRangeToAll">
            <DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandlerAll"></DateRangePickerEvents>
        </SfDateRangePicker>
    </div>
</div>

    <SfDashboardLayout Columns="10" CellSpacing="@(new double[]{15,15})" MediaQuery="max-width:700px">
        <DashboardLayoutPanels>
            <DashboardLayoutPanel Column="0" Row="0" SizeX="2" SizeY="1">
                <HeaderTemplate>Expiring Soon</HeaderTemplate>
                <ContentTemplate>
                    <table style="width: 100%; height: 100%; text-align: center; border: none;">
                        <tr>
                            <td style="text-align: center; vertical-align: middle;">
                                <p class="income-container">Total Items : @TotExpireSoon.ToString("N0") <br /> Total Value : @TotValueExpireSoon.ToString("N0") <img src="./Images/OIP.png" style="margin-left:5px;" /> </p>
                                <a class="card-body align-end subtle-bg" href="viewStock_pg/ExpireSoon">
                                    More info <i class="fa fa-arrow-circle-right"></i>
                                </a>
                            </td>
                        </tr>
                    </table>
                </ContentTemplate>
            </DashboardLayoutPanel>

            <DashboardLayoutPanel Column="2" Row="0" SizeX="2" SizeY="1">
                <HeaderTemplate>
                    Expired
                    <span style="margin-right: 10px;"></span>
                    <SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="200px" @bind-StartDate="@selectedRange.selectedRangeFrom"
                                       @bind-EndDate="@selectedRange.selectedRangeTo">
                        <DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandler"></DateRangePickerEvents>
                    </SfDateRangePicker>
                </HeaderTemplate>
                <ContentTemplate>
                    <table style="width: 100%; height: 100%; text-align: center; border: none;">
                        <tr>
                            <td style="text-align: center; vertical-align: middle;">
                                <p class="income-container">Total Items : @TotExpired.ToString("N0") <br /> Total Value : @TotValueExpired.ToString("N0") <img src="./Images/OIP.png" style="margin-left:5px;" /> </p>
                                <a class="card-body align-end subtle-bg" href="viewStock_pg/Expired">
                                    More info <i class="fa fa-arrow-circle-right"></i>
                                </a>
                            </td>
                        </tr>
                    </table>

                </ContentTemplate>
            </DashboardLayoutPanel>

            <DashboardLayoutPanel Column="4" Row="0" SizeX="2" SizeY="1">
                <HeaderTemplate>
                    Purchase Value
                    <span style="margin-right: 10px;"></span>
                    <SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="200px" @bind-StartDate="@selectedRangePv.selectedRangeFromPv"
                                       @bind-EndDate="@selectedRangePv.selectedRangeToPv">
                        <DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandlerPv"></DateRangePickerEvents>
                    </SfDateRangePicker>
                </HeaderTemplate>
                <ContentTemplate>
                    <table style="width: 100%; height: 100%; text-align: center; border: none;">
                        <tr>
                            <td style="text-align: center; vertical-align: middle;">
                                <p class="income-container">Total Value : @TotPurchValue.ToString("N0") <img src="./Images/OIP.png" style="margin-left:5px;" /> </p>
                            </td>
                        </tr>
                    </table>
                </ContentTemplate>
            </DashboardLayoutPanel>

            <DashboardLayoutPanel Column="6" Row="0" SizeX="2" SizeY="1">
                <HeaderTemplate>
                    Sales Value
                    <span style="margin-right: 10px;"></span>
                    <SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="200px" @bind-StartDate="@selectedRangeSv.selectedRangeFromSv"
                                       @bind-EndDate="@selectedRangeSv.selectedRangeToSv">
                        <DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandlerSv"></DateRangePickerEvents>
                    </SfDateRangePicker>
                </HeaderTemplate>
                <ContentTemplate>
                    <table style="width: 100%; height: 100%; text-align: center; border: none;">
                        <tr>
                            <td style="text-align: center; vertical-align: middle;">
                                <p class="income-container">Total Value : @TotSaleValue.ToString("N0") <img src="./Images/OIP.png" style="margin-left:5px;" /> </p>
                            </td>
                        </tr>
                    </table>
                </ContentTemplate>
            </DashboardLayoutPanel>

            <DashboardLayoutPanel Column="8" Row="0" SizeX="2" SizeY="1">
                <HeaderTemplate>
                    Sales Margin
                    <span style="margin-right: 10px;"></span>
                    <SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="200px" @bind-StartDate="@selectedRangeDiff.selectedRangeFromDiff"
                                       @bind-EndDate="@selectedRangeDiff.selectedRangeToDiff">
                        <DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandlerDiff"></DateRangePickerEvents>
                    </SfDateRangePicker>
                </HeaderTemplate>
                <ContentTemplate>
                    <table style="width: 100%; height: 100%; text-align: center; border: none;">
                        <tr>
                            <td style="text-align: center; vertical-align: middle;">
                                <p class="income-container">Total Value : @TotDiff.ToString("N0")  <img src="./Images/OIP.png" style="margin-left:5px;" /> <br /> Margin : @Marg.ToString("N2") % </p>
                            </td>
                        </tr>
                    </table>
                </ContentTemplate>
            </DashboardLayoutPanel>

            <DashboardLayoutPanel Column="0" Row="2" SizeX="2" SizeY="1">
                <HeaderTemplate>
                    L2H
                    <span style="margin-right: 10px;"></span>
					<SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="200px" @bind-StartDate="@selectedRangeL2H.selectedRangeFromL2H"
									   @bind-EndDate="@selectedRangeL2H.selectedRangeToL2H">
						<DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandlerL2H"></DateRangePickerEvents>
                    </SfDateRangePicker>
                </HeaderTemplate>
                <ContentTemplate>
                    <table style="width: 100%; height: 100%; text-align: center; border: none;">
                        <tr>
                            <td style="text-align: center; vertical-align: middle;">
								@* <p class="income-container" style="margin: 0;">Non Alert : @TotNonAlertValue.ToString("N0")  <img src="./Images/OIP.png" style="margin-left:5px;" /><br /> Reversal : @TotRevValue.ToString("N0") <img src="./Images/OIP.png" style="margin-left:5px;" /> </p> *@
                                <p class="income-container" style="margin: 0;">Total Value : @TotL2H.ToString("N0")  <img src="./Images/OIP.png" style="margin-left:5px;" /></p>  @*  @MargRev.ToString("N2") % *@
                            </td>
                        </tr>
                    </table>
                </ContentTemplate>
            </DashboardLayoutPanel>

			<DashboardLayoutPanel Column="2" Row="2" SizeX="2" SizeY="1">
				<HeaderTemplate>
					H2L
					<span style="margin-right: 10px;"></span>
				</HeaderTemplate>
				<ContentTemplate>
					<table style="width: 100%; height: 100%; text-align: center; border: none;">
						<tr>
							<td style="text-align: center; vertical-align: middle;">
								<p class="income-container">Total Value : @TotAlertValue.ToString("N0")  <img src="./Images/OIP.png" style="margin-left:5px;" /></p>
							</td>
						</tr>
					</table>
				</ContentTemplate>
			</DashboardLayoutPanel>

			<DashboardLayoutPanel Column="4" Row="2" SizeX="2" SizeY="1">
				<HeaderTemplate>
					Commission Charges
					<span style="margin-right: 10px;"></span>
					<SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="200px" @bind-StartDate="@selectedRangeComm.selectedRangeFromComm"
			  		    @bind-EndDate="@selectedRangeComm.selectedRangeToComm">
						<DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandlerComm"></DateRangePickerEvents>
                    </SfDateRangePicker>
				</HeaderTemplate>
				<ContentTemplate>
					<table style="width: 100%; height: 100%; text-align: center; border: none;">
						<tr>
							<td style="text-align: center; vertical-align: middle;">
								<p class="income-container">Total Value : @TotCommCharges.ToString("N0")  <img src="./Images/OIP.png" style="margin-left:5px;" /></p>
							</td>
						</tr>
					</table>
				</ContentTemplate>
			</DashboardLayoutPanel>

			<DashboardLayoutPanel Column="6" Row="2" SizeX="2" SizeY="1">
				<HeaderTemplate>
				</HeaderTemplate>
				<ContentTemplate>
				</ContentTemplate>
			</DashboardLayoutPanel>

			<DashboardLayoutPanel Column="8" Row="2" SizeX="2" SizeY="1">
				<HeaderTemplate>
				</HeaderTemplate>
				<ContentTemplate>
				</ContentTemplate>
			</DashboardLayoutPanel>

            <DashboardLayoutPanel Column="0" Row="4" SizeX="5" SizeY="3">
                <HeaderTemplate>
                    Purchase by Group
                    <span style="margin-right: 10px;"></span>
                    <SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="200px" @bind-StartDate="@selectedRangePurchByGrp.selectedRangeFromPurchByGrp"
                                       @bind-EndDate="@selectedRangePurchByGrp.selectedRangeToPurchByGrp">
                        <DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandlerPurchByGrp"></DateRangePickerEvents>
                    </SfDateRangePicker>
                    <SfMultiSelect @ref="GrpObj2" TValue="string[]" TItem="GroupMaster" AllowFiltering="true" Mode="@VisualMode.CheckBox" DataSource="@GroupMasterList2" ShowSelectAll="true" PopupHeight="350px" Width="250px" ShowDropDownIcon="true">
                        <MultiSelectFieldSettings Text="GrpDesc" Value="GrpNo"></MultiSelectFieldSettings>
                        <MultiSelectEvents TItem="GroupMaster" TValue="string[]" ValueChange="@OnGroupChanged2" Filtering="OnGroupFiltering2"></MultiSelectEvents>
                    </SfMultiSelect>

                </HeaderTemplate>
                <ContentTemplate>
                    @if (renderingPurchDataSumm?.Any() == true)
                    {
                        <div style="display: flex; flex-direction: column; height: 100%;">
                            <div style="flex: 1; overflow: auto;">
                                <SfAccumulationChart EnableSmartLabels="true">
                                    <AccumulationChartSeriesCollection>
                                        <AccumulationChartSeries DataSource="@renderingPurchDataSumm" XName="X" YName="Y" Radius="83%" StartAngle="0" EndAngle="360" InnerRadius="50%" Palettes="@palettes2">
                                            <AccumulationDataLabelSettings Visible="true">
                                            </AccumulationDataLabelSettings>
                                        </AccumulationChartSeries>
                                    </AccumulationChartSeriesCollection>
								   <AccumulationChartTooltipSettings Enable="true" 
                                     Format="X: ${point.x} <br/> Y: ${point.y}">
							  	   </AccumulationChartTooltipSettings>
                                </SfAccumulationChart>
                            </div>
                            <div style="margin-top: 15px; border-top: 1px solid #ccc; padding-top: 10px; text-align: left; font-family: Arial, sans-serif;">
                                <strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">Total Purchase:</strong>
                                <span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotPurchases.ToString("N0")</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div>Loading chart data...</div>
                    }
                </ContentTemplate>
            </DashboardLayoutPanel>

            <DashboardLayoutPanel Column="6" Row="4" SizeX="5" SizeY="3">
                <HeaderTemplate>
                    Sales by Group
                    <span style="margin-right: 10px;"></span>
                    <SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="200px" @bind-StartDate="@selectedRangeSalesByGrp.selectedRangeFromSalesByGrp"
                                       @bind-EndDate="@selectedRangeSalesByGrp.selectedRangeToSalesByGrp">
                        <DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandlerSalesByGrp"></DateRangePickerEvents>
                    </SfDateRangePicker>

                    <SfMultiSelect @ref="GrpObj3" TValue="string[]" TItem="GroupMaster" AllowFiltering="true" Mode="@VisualMode.CheckBox" DataSource="@GroupMasterList3" ShowSelectAll="true" PopupHeight="350px" Width="250px" ShowDropDownIcon="true">
                        <MultiSelectFieldSettings Text="GrpDesc" Value="GrpNo"></MultiSelectFieldSettings>
                        <MultiSelectEvents TItem="GroupMaster" TValue="string[]" ValueChange="@OnGroupChanged3" Filtering="OnGroupFiltering3"></MultiSelectEvents>
                    </SfMultiSelect>

                </HeaderTemplate>
                <ContentTemplate>
                    @if (renderingDataSumm?.Any() == true)
                    {
                        <div style="display: flex; flex-direction: column; height: 100%;">
                            <div style="flex: 1; overflow: auto;">
                                <SfAccumulationChart EnableSmartLabels="true">
                                    <AccumulationChartSeriesCollection>
                                        <AccumulationChartSeries DataSource="@renderingDataSumm" XName="X" YName="Y" Radius="83%" StartAngle="0" EndAngle="360" InnerRadius="50%" Palettes="@palettes">
                                            <AccumulationDataLabelSettings Visible="true">
                                            </AccumulationDataLabelSettings>
                                        </AccumulationChartSeries>
                                    </AccumulationChartSeriesCollection>
								   <AccumulationChartTooltipSettings Enable="true" 
                                     Format="X: ${point.x} <br/> Y: ${point.y}">
							  	   </AccumulationChartTooltipSettings>
                                </SfAccumulationChart>
                            </div>
                            <div style="margin-top: 15px; border-top: 1px solid #ccc; padding-top: 10px; text-align: left; font-family: Arial, sans-serif;">
                                <strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">Total Sales:</strong>
                                <span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotSales.ToString("N0")</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div>Loading chart data...</div>
                    }
                </ContentTemplate>
            </DashboardLayoutPanel>

            @if (chartSource != null)
            {
                <DashboardLayoutPanel Column="0" Row="7" SizeX="10" SizeY="5">
                    <HeaderTemplate>
                        @* <SfComboBox TValue="string" TItem="GroupMaster" @bind-Value="@vGrpCode" DataSource="@GroupMasterList" Placeholder="Select a Group" Width="150px" PopupWidth="300px">
                          <ComboBoxFieldSettings Value="GrpNo" Text="GrpDesc"></ComboBoxFieldSettings>
                          <ComboBoxEvents TItem="GroupMaster" TValue="string" ValueChange="@OnGroupChanged"></ComboBoxEvents>
                          </SfComboBox> *@

                        <SfMultiSelect @ref="GrpObj" TValue="string[]" TItem="GroupMaster" AllowFiltering="true" Mode="@VisualMode.CheckBox" DataSource="@GroupMasterList" ShowSelectAll="true" PopupHeight="350px" Width="250px" ShowDropDownIcon="true">
                            <MultiSelectFieldSettings Text="GrpDesc" Value="GrpNo"></MultiSelectFieldSettings>
                            <MultiSelectEvents TItem="GroupMaster" TValue="string[]" ValueChange="@OnGroupChanged" Filtering="OnGroupFiltering"></MultiSelectEvents>
                        </SfMultiSelect>

                        <span style="margin-right: 10px;"></span>
                        <SfMultiSelect @ref="CliObj" TValue="string[]" TItem="ClientMaster" AllowFiltering="true" Mode="@VisualMode.CheckBox" DataSource="@ClientMasterList" ShowSelectAll="true" PopupHeight="350px" Width="250px" ShowDropDownIcon="true">
                            <MultiSelectFieldSettings Text="ClientName" Value="ClientCode"></MultiSelectFieldSettings>
                            <MultiSelectEvents TItem="ClientMaster" TValue="string[]" ValueChange="@OnClientChanged" Filtering="OnClientFiltering"></MultiSelectEvents>
                        </SfMultiSelect>

                        <span style="margin-right: 10px;"></span>
                        <SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="200px" @bind-StartDate="@selectedRangePs.selectedRangeFromPs"
                                           @bind-EndDate="@selectedRangePs.selectedRangeToPs">
                            <DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandlerPs"></DateRangePickerEvents>
                        </SfDateRangePicker>

                        <span style="margin-right: 10px;"></span>
                        <SfMultiSelect @ref="ComboObj" TValue="string[]" TItem="ItemMaster" AllowFiltering="true" Mode="@VisualMode.CheckBox" DataSource="@ItemMasterList" ShowSelectAll="true" PopupHeight="350px" Width="350px" ShowDropDownIcon="true">
                            <MultiSelectFieldSettings Text="ItemDesc" Value="ItemListNo"></MultiSelectFieldSettings>
                            <MultiSelectEvents TItem="ItemMaster" TValue="string[]" ValueChange="@OnItemChanged" Filtering="OnFiltering"></MultiSelectEvents>
                        </SfMultiSelect>

					    @* <span style="margin-right: 10px;"></span>
				        <SfRadioButton Label="By Customer" Name="opt1" Value="ByCustomer" @bind-Checked="SelectedMethod" ValueChange="@onChange"></SfRadioButton>
			            <SfRadioButton Label="By Date" Name="opt1" Value="ByDate" @bind-Checked="SelectedMethod" ValueChange="onChange"></SfRadioButton> *@

						<SfRadioButton Label="By Customer" Name="opt1" Value="ByCustomer" TChecked="string" ValueChange="@OnMethodChanged" />

						<SfRadioButton Label="By Date" Name="opt1" Value="ByDate" TChecked="string" ValueChange="@OnMethodChanged"/>

                    </HeaderTemplate>
                    <ContentTemplate>
                        <div style="display: flex; flex-direction: column; height: 100%;">
					        @if (SelectedMethod=="ByDate")
					        {
                            <div style="flex: 1; overflow: auto;">
                                <SfChart Title="" Palettes="@palettes">
                                    <ChartPrimaryXAxis Title="" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                                    <ChartLegendSettings Visible="true"></ChartLegendSettings>
                                    <ChartPrimaryYAxis Title="Purchase vs Sales"></ChartPrimaryYAxis>
                                    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                    <ChartSeriesCollection>
                                        <ChartSeries Name="Sales" DataSource="@chartSource" XName="vMon" YName="vAmount" Type="ChartSeriesType.Column">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="true">
                                                </ChartDataLabel>
                                            </ChartMarker>
                                        </ChartSeries>
                                        <ChartSeries Name="Purchase" DataSource="@purchaseSource" XName="vMon" YName="vAmount" Type="ChartSeriesType.Column">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="true"></ChartDataLabel>
                                            </ChartMarker>
                                        </ChartSeries>
                                    </ChartSeriesCollection>
                                </SfChart>
							</div>
						   	}
							else
							{
                            <div style="flex: 1; overflow: auto;">
                                <SfChart Title="" Palettes="@palettes">
                                    <ChartPrimaryXAxis Title="" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                                    <ChartLegendSettings Visible="true"></ChartLegendSettings>
                                    <ChartPrimaryYAxis Title="Purchase vs Sales"></ChartPrimaryYAxis>
                                    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                    <ChartSeriesCollection>
                                        <ChartSeries Name="Sales" DataSource="@chartSource" XName="vMon1" YName="vAmount" Type="ChartSeriesType.Column">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="true">
                                                </ChartDataLabel>
                                            </ChartMarker>
                                        </ChartSeries>
                                        <ChartSeries Name="Purchase" DataSource="@purchaseSource" XName="vMon1" YName="vAmount" Type="ChartSeriesType.Column">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="true"></ChartDataLabel>
                                            </ChartMarker>
                                        </ChartSeries>
                                    </ChartSeriesCollection>
                                </SfChart>
							</div>
							}
                            <div style="margin-top: 15px; border-top: 1px solid #ccc; padding-top: 10px; text-align: left; font-family: Arial, sans-serif;">
								<strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">Total Purchase:</strong>
								<span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotPurchasesPs.ToString("N0")</span>
							    <span style="display: inline-block; width: 40px;"></span>
                                <strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">Total Sales:</strong>
                                <span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotSalesPs.ToString("N0")</span
								<span style="display: inline-block; width: 40px;"></span>
						    	<strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">Margin Value:</strong>
								<span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotMargValue.ToString("N2")</span>
								<span style="display: inline-block; width: 40px;"></span>
						    	<strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">Margin:</strong>
								<span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotMarg.ToString("N2")</span>
								<span style="display: inline-block; width: 40px;"></span>
								<strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">L2H (From):</strong>
								<span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotL2H2.ToString("N0")</span>
								<span style="display: inline-block; width: 40px;"></span>
								<strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">L2H (To):</strong>
								<span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotL2H2To.ToString("N0")</span>
								<span style="display: inline-block; width: 40px;"></span>
								@* <strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">Qty:</strong>
								<span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotStkQty.ToString("N0")</span>
								<span style="display: inline-block; width: 40px;"></span>
								<strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">Stock Value:</strong>
								<span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotStkAmt.ToString("N0")</span> *@

                            </div>
                        </div>

                    </ContentTemplate>
                </DashboardLayoutPanel>
            }

			@if (groupedData != null)
			{
				<DashboardLayoutPanel Column="0" Row="12" SizeX="10" SizeY="5">
					<HeaderTemplate>
						Customer vs Kit
						<span style="margin-right: 10px;"></span>
						<SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="200px" @bind-StartDate="@selectedRangeSalesByCust.selectedRangeFromSalesByCust"
						@bind-EndDate="@selectedRangeSalesByCust.selectedRangeToSalesByCust">
							<DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandlerSalesByCust"></DateRangePickerEvents>
						</SfDateRangePicker>
						<span style="margin-right: 10px;"></span>
						<SfMultiSelect @ref="CliObj2" TValue="string[]" TItem="ClientMaster" AllowFiltering="true" Mode="@VisualMode.CheckBox" DataSource="@ClientMasterList2" ShowSelectAll="true" PopupHeight="350px" Width="250px" ShowDropDownIcon="true">
							<MultiSelectFieldSettings Text="ClientName" Value="ClientCode"></MultiSelectFieldSettings>
							<MultiSelectEvents TItem="ClientMaster" TValue="string[]" ValueChange="@OnClientChanged2" Filtering="OnClientFiltering2"></MultiSelectEvents>
						</SfMultiSelect>

						<span style="margin-right: 10px;"></span>
						<SfMultiSelect @ref="ComboObj2" TValue="string[]" TItem="ItemMaster" AllowFiltering="true" Mode="@VisualMode.CheckBox" DataSource="@ItemMasterList2" ShowSelectAll="true" PopupHeight="350px" Width="350px" ShowDropDownIcon="true">
							<MultiSelectFieldSettings Text="ItemDesc" Value="ItemListNo"></MultiSelectFieldSettings>
							<MultiSelectEvents TItem="ItemMaster" TValue="string[]" ValueChange="@OnItemChanged2" Filtering="OnFiltering2"></MultiSelectEvents>
						</SfMultiSelect>

					</HeaderTemplate>
					<ContentTemplate>
                        <div style="display: flex; flex-direction: column; height: 100%;">
                            <div style="flex: 1; overflow: auto;">
							<SfChart Title="Customer vs Items">
							<ChartPrimaryXAxis Title="Customer" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" />
							<ChartPrimaryYAxis Title="Quantity" />
							<ChartTooltipSettings Enable="true" />
							<ChartLegendSettings Visible="true" />

							<ChartSeriesCollection>
								@foreach (var item1 in uniqueItems)
								{
									<ChartSeries DataSource="@groupedData.Where(x => x.Item.Equals(item1)).ToList()"
									XName="Customer"
									YName="Quantity"
									Name="@item1.ToString()"
									Type="ChartSeriesType.Column">
										<ChartMarker>
											<ChartDataLabel Visible="true" />
										</ChartMarker>
									</ChartSeries>
								}
							</ChartSeriesCollection>
							</SfChart>
                            </div>
                            <div style="margin-top: 15px; border-top: 1px solid #ccc; padding-top: 10px; text-align: left; font-family: Arial, sans-serif;">
                                <strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">Total Quantity:</strong>
                                <span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotQty.ToString("N0")</span
							    <span style="display: inline-block; width: 40px;"></span>
								<strong style="font-size: 18px; font-weight: bold; color: #2c3e50;">Total Value:</strong>
								<span style="font-size: 18px; font-weight: bold; color: #27ae60;">@TotValue.ToString("N0")</span>
                            </div>
                        </div>
					</ContentTemplate>
				</DashboardLayoutPanel>
			}

        </DashboardLayoutPanels>
    </SfDashboardLayout>
}
else
{
	@if (iam == "02")
	{
<SfDashboardLayout Columns="8" CellSpacing="@(new double[]{10,10})" MediaQuery="max-width:700px">
	<DashboardLayoutPanels>
		<DashboardLayoutPanel Column="0" Row="0" SizeX="2" SizeY="1">
			<HeaderTemplate>Expiring Soon</HeaderTemplate>
			<ContentTemplate>
				<table style="width: 100%; height: 100%; text-align: center; border: none;">
					<tr>
						<td style="text-align: center; vertical-align: middle;">
							<p class="income-container">Total Items : @TotExpireSoon <br /> Total Value : @TotValueExpireSoon.ToString("N0") <img src="./Images/OIP.png" style="margin-left:5px;" /> </p>
							<a class="card-body align-end subtle-bg" href="viewStock_pg/ExpireSoon">
								More info <i class="fa fa-arrow-circle-right"></i>
							</a>
						</td>
					</tr>
				</table>
			</ContentTemplate>
		</DashboardLayoutPanel>

		<DashboardLayoutPanel Column="2" Row="0" SizeX="2" SizeY="1">
            <HeaderTemplate>
                Expired
                <span style="margin-right: 10px;"></span>
                <SfDateRangePicker TValue="DateTime?" Placeholder="Choose a Date Range" FullScreen="true" ShowClearButton="true" Width="200px" @bind-StartDate="@selectedRange.selectedRangeFrom"
                                   @bind-EndDate="@selectedRange.selectedRangeTo">
                    <DateRangePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandler"></DateRangePickerEvents>
                </SfDateRangePicker>
            </HeaderTemplate>
			<ContentTemplate>
				<table style="width: 100%; height: 100%; text-align: center; border: none;">
					<tr>
						<td style="text-align: center; vertical-align: middle;">
							<p class="income-container">Total Items : @TotExpired <br /> Total Value : @TotValueExpired.ToString("N0") <img src="./Images/OIP.png" style="margin-left:5px;" /> </p>
							<a class="card-body align-end subtle-bg" href="viewStock_pg/Expired">
								More info <i class="fa fa-arrow-circle-right"></i>
							</a>
						</td>
					</tr>
				</table>

			</ContentTemplate>
		</DashboardLayoutPanel>		
			</DashboardLayoutPanels>
		</SfDashboardLayout>
	}

}

@code {

	[CascadingParameter]
	public EventCallback notify { get; set; }
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await notify.InvokeAsync();
		}
	}
	private string SelectedMethod { get; set; } = "ByDate";

	private bool SpinnerVisible { get; set; } = false;
	protected List<Stock> StockList = new();
	protected List<StockTran> StockTransList = new();

	protected List<Stock> ExpiredList = new();
	protected List<Stock> ExpireSoonList = new();
	public decimal TotExpired;
	public decimal TotExpireSoon;
	public decimal TotValueExpireSoon;
	public decimal TotValueExpired;
	public decimal TotPurchValue;
	public decimal TotSaleValue;
	public decimal TotDiff;
	public decimal Marg;
	public decimal TotNonAlertValue;
	public decimal TotRevValue;
	public decimal TotL2H;
	public decimal MargRev;
	public decimal TotAlertValue;
	public decimal TotDiffValue;

	public decimal TotSales;
	public decimal TotPurchases;
	public decimal TotSalesPs;
	public decimal TotPurchasesPs;
	public decimal TotQty;
	public decimal TotValue;
	public decimal TotMarg;
	public decimal TotMargValue;

	public decimal TotNonAlertValue2;
	public decimal TotRevValue2;
	public decimal TotL2H2;
	public decimal TotL2H2To;
	public decimal TotCommCharges;
	public decimal TotStkQty;
	public decimal TotStkAmt;

	public class DateRangeAll
	{
		public DateTime? selectedRangeFromAll { get; set; }
		public DateTime? selectedRangeToAll { get; set; }
	}
	private DateRangeAll selectedRangeAll { get; set; } = new DateRangeAll();

	public class DateRangePs
	{
		public DateTime? selectedRangeFromPs { get; set; }
		public DateTime? selectedRangeToPs { get; set; }
	}
	private DateRangePs selectedRangePs { get; set; } = new DateRangePs();

	public class DateRange
	{
		public DateTime? selectedRangeFrom { get; set; }
		public DateTime? selectedRangeTo { get; set; }
	}
	private DateRange selectedRange { get; set; } = new DateRange();

	public class DateRangePv
	{
		public DateTime? selectedRangeFromPv { get; set; }
		public DateTime? selectedRangeToPv { get; set; }
	}
	private DateRangePv selectedRangePv { get; set; } = new DateRangePv();

	public class DateRangeSv
	{
		public DateTime? selectedRangeFromSv { get; set; }
		public DateTime? selectedRangeToSv { get; set; }
	}
	private DateRangeSv selectedRangeSv { get; set; } = new DateRangeSv();

	public class DateRangeDiff
	{
		public DateTime? selectedRangeFromDiff { get; set; }
		public DateTime? selectedRangeToDiff { get; set; }
	}
	private DateRangeDiff selectedRangeDiff { get; set; } = new DateRangeDiff();

	public class DateRangeL2H
	{
		public DateTime? selectedRangeFromL2H { get; set; }
		public DateTime? selectedRangeToL2H { get; set; }
	}
	private DateRangeL2H selectedRangeL2H { get; set; } = new DateRangeL2H();

	public class DateRangeComm
	{
		public DateTime? selectedRangeFromComm { get; set; }
		public DateTime? selectedRangeToComm { get; set; }
	}
	private DateRangeComm selectedRangeComm { get; set; } = new DateRangeComm();

	public class DateRangeSalesByGrp
	{
		public DateTime? selectedRangeFromSalesByGrp { get; set; }
		public DateTime? selectedRangeToSalesByGrp { get; set; }
	}
	private DateRangeSalesByGrp selectedRangeSalesByGrp { get; set; } = new DateRangeSalesByGrp();

	public class DateRangePurchByGrp
	{
		public DateTime? selectedRangeFromPurchByGrp { get; set; }
		public DateTime? selectedRangeToPurchByGrp { get; set; }
	}
	private DateRangePurchByGrp selectedRangePurchByGrp { get; set; } = new DateRangePurchByGrp();

	public class DateRangeSalesByCust
	{
		public DateTime? selectedRangeFromSalesByCust { get; set; }
		public DateTime? selectedRangeToSalesByCust { get; set; }
	}
	private DateRangeSalesByCust selectedRangeSalesByCust { get; set; } = new DateRangeSalesByCust(); 

	// public string? vGrpCode { get; set; }
	// public string? vClientCode { get; set; }
	// public string? vClientCode2 { get; set; }
	// public string? vItemCode { get; set; }

	public string[]? vGrpArray { get; set; }
	public string[]? vGrpArray2 { get; set; }
	public string[]? vGrpArray3 { get; set; }
	public string[]? vClientArray { get; set; }
	public string[]? vClientArray2 { get; set; }
	public string[]? vItemArray { get; set; }
	public string[]? vItemArray2 { get; set; }

	protected class RenderingData
	{
		public string? X { get; set; }
		public decimal? Y { get; set; }
	}
	protected List<RenderingData> renderingDataSumm= new();

	protected class RenderingPurchData
	{
		public string? X { get; set; }
		public decimal? Y { get; set; }
	}
	protected List<RenderingPurchData> renderingPurchDataSumm = new();

	protected class Sale
	{
		public string? vMon { get; set; }
		public string? vMon1 { get; set; }
		public decimal? vAmount { get; set; }
	}
	private List<Sale> chartSource = new();

	protected class Purchase
	{
		public string? vMon { get; set; }
		public string? vMon1 { get; set; }
		public decimal? vAmount { get; set; }
	}
	private List<Purchase> purchaseSource = new();

	//private SfComboBox<string, ItemMaster> ComboObj;

	private SfMultiSelect<string[], GroupMaster> GrpObj;
	private SfMultiSelect<string[], GroupMaster> GrpObj2;
	private SfMultiSelect<string[], GroupMaster> GrpObj3;
	private SfMultiSelect<string[], ItemMaster> ComboObj;
	private SfMultiSelect<string[], ItemMaster> ComboObj2;
	private List<GroupMaster>? GroupMasterList = new();
	private List<GroupMaster>? GroupMasterList2 = new();
	private List<GroupMaster>? GroupMasterList3 = new();
	private List<ItemMaster>? ItemMasterList = new();
	private List<ItemMaster> ItemMasterList2 = new();
	private List<ItemMaster> ItemMastList = new();
	protected List<ClientMaster>? ClientMasterList = new();
	protected List<ClientMaster>? ClientMasterList2 = new();
	private SfMultiSelect<string[], ClientMaster> CliObj2;
	private SfMultiSelect<string[], ClientMaster> CliObj;

	public List<TrDetail>? TrDetailList = new();
	public List<TrDetail>? TrDetailListSelect = new();
	public List<VwTransfer>? TransferListAll = new();
	public List<VwTransfer>? TransferList = new();

	public List<TrDetail>? TrDetailList2 = new();
	public List<TrDetail>? TrDetailListSelect2 = new();
	public List<VwTransfer>? TransferListAll2 = new();
	public List<VwTransfer>? TransferList2 = new();
	public List<VwTransfer>? TransferList3 = new();
	public List<CommCharge>? CommChargeList = new();

	private string Custom { get; set; }
	public string iam;

	protected class CustomerItemStat
	{
		public string Customer { get; set; }
		public string Item { get; set; }
		public decimal Quantity { get; set; }
	}
	protected List<CustomerItemStat> groupedData = new();
	protected List<string> uniqueItems = new();

	private string[] palettes = new string[] { "#61EFCD", "#CDDE1F", "#FEC200", "#CA765A", "#2485FA", "#F57D7D", "#C152D2",
	"#8854D9", "#3D4EB8", "#00BCD7","#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e", "#997300" };

	private string[] palettes2 = new string[]
	{
	"#1ABC9C", // turquoise
    "#2ECC71", // emerald
    "#3498DB", // blue
    "#9B59B6", // amethyst
    "#34495E", // wet asphalt
    "#16A085", // greenish teal
    "#27AE60", // green
    "#2980B9", // strong blue
    "#8E44AD", // deep purple
    "#2C3E50", // dark blue-gray
    "#E74C3C", // red
    "#E67E22", // orange
    "#F1C40F", // yellow
    "#ECF0F1", // light gray
    "#95A5A6", // gray
    "#D35400", // pumpkin
    "#C0392B", // dark red
    "#BDC3C7", // silver
    "#7F8C8D", // grayish blue
    "#FF6F61"  // coral pink
	};

	// public class TrDetailWithExtras
	// {
	// 	public TrDetail TrDetail { get; set; }
	// 	public string ItemGrpCode { get; set; }
	// 	public string TrdClientCodeFrom { get; set; }
	// 	public string TrdListNo { get; set; }
	// 	public string TrdReversal { get; set; }
	// 	public long? TrdIdRevJourn { get; set; }
	// 	public long TrdId { get; set; }
	// }
	protected override async Task OnInitializedAsync()
	{
		try
		{
			this.SpinnerVisible = true;
			iam = await sessionStorage.GetItemAsync<string>("adminRo");
			if (iam == "01")
			{
				string datestringfromAll = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
				selectedRangeAll.selectedRangeFromAll = DateTime.ParseExact(datestringfromAll, "dd/MM/yyyy", CultureInfo.InvariantCulture);
				selectedRangeAll.selectedRangeToAll = DateTime.Now;
				string datestringfrom9 = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
				selectedRangeComm.selectedRangeFromComm = DateTime.ParseExact(datestringfrom9, "dd/MM/yyyy", CultureInfo.InvariantCulture);
				selectedRangeComm.selectedRangeToComm = DateTime.Now;
				string datestringfrom8 = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
				selectedRangeL2H.selectedRangeFromL2H = DateTime.ParseExact(datestringfrom8, "dd/MM/yyyy", CultureInfo.InvariantCulture);
				selectedRangeL2H.selectedRangeToL2H = DateTime.Now;
				string datestringfrom7 = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
				selectedRangePurchByGrp.selectedRangeFromPurchByGrp = DateTime.ParseExact(datestringfrom7, "dd/MM/yyyy", CultureInfo.InvariantCulture);
				selectedRangePurchByGrp.selectedRangeToPurchByGrp = DateTime.Now;
				string datestringfrom6 = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
				selectedRangeSalesByCust.selectedRangeFromSalesByCust = DateTime.ParseExact(datestringfrom6, "dd/MM/yyyy", CultureInfo.InvariantCulture);
				selectedRangeSalesByCust.selectedRangeToSalesByCust = DateTime.Now;
				string datestringfrom5 = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
				selectedRangeDiff.selectedRangeFromDiff = DateTime.ParseExact(datestringfrom5, "dd/MM/yyyy", CultureInfo.InvariantCulture);
				selectedRangeDiff.selectedRangeToDiff = DateTime.Now;
				string datestringfrom4 = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
				selectedRangePs.selectedRangeFromPs = DateTime.ParseExact(datestringfrom4, "dd/MM/yyyy", CultureInfo.InvariantCulture);
				selectedRangePs.selectedRangeToPs = DateTime.Now;
				string datestringfrom = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
				selectedRange.selectedRangeFrom = DateTime.ParseExact(datestringfrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
				selectedRange.selectedRangeTo = DateTime.Now;
				string datestringfrom1 = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
				selectedRangePv.selectedRangeFromPv = DateTime.ParseExact(datestringfrom1, "dd/MM/yyyy", CultureInfo.InvariantCulture);
				selectedRangePv.selectedRangeToPv = DateTime.Now;
				string datestringfrom2 = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
				selectedRangeSv.selectedRangeFromSv = DateTime.ParseExact(datestringfrom2, "dd/MM/yyyy", CultureInfo.InvariantCulture);
				selectedRangeSv.selectedRangeToSv = DateTime.Now;
				string datestringfrom3 = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
				selectedRangeSalesByGrp.selectedRangeFromSalesByGrp = DateTime.ParseExact(datestringfrom3, "dd/MM/yyyy", CultureInfo.InvariantCulture);
				selectedRangeSalesByGrp.selectedRangeToSalesByGrp = DateTime.Now;

				GroupMasterList = await myGroupMaster.GetGroupMasters();
				GroupMasterList2 = GroupMasterList;
				GroupMasterList3 = GroupMasterList;
				ClientMasterList = await myClientService.GetClients();
				ClientMasterList2 = ClientMasterList;
				ItemMasterList2 = await myItemMasterService.GetItemMastersDistinct();
				ItemMastList = await myItemMasterService.GetItemMasters();
				StockList = await myStockService.GetAllStocks();
				CommChargeList = await myCommChargeService.GetCommCharges();

				var ExpireSoonList = StockList.Where(x => x.ItemExpiryDate >= DateTime.Now && x.ItemExpiryDate <= DateTime.Now.AddMonths(2));
				TotExpireSoon = ExpireSoonList.Sum(x =>
					(x.ItemOpQty != null ? Convert.ToDecimal(x.ItemOpQty) : 0) +
					(x.ItemPurQty != null ? Convert.ToDecimal(x.ItemPurQty) : 0) +
					(x.ItemTrInQty != null ? Convert.ToDecimal(x.ItemTrInQty) : 0) -
					((x.ItemDelQty != null ? Convert.ToDecimal(x.ItemDelQty) : 0) +
					(x.ItemTrOutQty != null ? Convert.ToDecimal(x.ItemTrOutQty) : 0))
				);

				TotValueExpireSoon = ExpireSoonList.Sum(x =>
					((x.ItemOpQty != null ? Convert.ToDecimal(x.ItemOpQty) : 0) +
					(x.ItemPurQty != null ? Convert.ToDecimal(x.ItemPurQty) : 0) +
					(x.ItemTrInQty != null ? Convert.ToDecimal(x.ItemTrInQty) : 0) -
					((x.ItemDelQty != null ? Convert.ToDecimal(x.ItemDelQty) : 0) +
					(x.ItemTrOutQty != null ? Convert.ToDecimal(x.ItemTrOutQty) : 0))) * (x.ItemCp != null ? Convert.ToDecimal(x.ItemCp) : 0)
				) ;


				var args = new RangePickerEventArgs<DateTime?>
					{
						StartDate = selectedRangePv.selectedRangeFromPv,
						EndDate = selectedRangePv.selectedRangeToPv
					};

				await ValueChangeHandler(args);
				await ValueChangeHandlerPv(args);
				await ValueChangeHandlerSv(args);
				await ValueChangeHandlerDiff(args);
				await ValueChangeHandlerL2H(args);
				await ValueChangeHandlerComm(args);
				await Ps();
				await PurchbyGrp();
				await SalesbyGrp();
				await SalesbyCust();
			}
			else
			{
				if (iam == "02")
				{
					string datestringfrom4 = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
					selectedRangePs.selectedRangeFromPs = DateTime.ParseExact(datestringfrom4, "dd/MM/yyyy", CultureInfo.InvariantCulture);
					selectedRangePs.selectedRangeToPs = DateTime.Now;
					string datestringfrom = "01/" + DateTime.Now.Month.ToString("00") + "/" + DateTime.Now.Year;
					selectedRange.selectedRangeFrom = DateTime.ParseExact(datestringfrom, "dd/MM/yyyy", CultureInfo.InvariantCulture);
					selectedRange.selectedRangeTo = DateTime.Now;
					StockList = await myStockService.GetAllStocks();

					var ExpireSoonList = StockList.Where(x => x.ItemExpiryDate >= DateTime.Now && x.ItemExpiryDate <= DateTime.Now.AddMonths(2));
					TotExpireSoon = ExpireSoonList.Sum(x =>
						(x.ItemOpQty != null ? Convert.ToDecimal(x.ItemOpQty) : 0) +
						(x.ItemPurQty != null ? Convert.ToDecimal(x.ItemPurQty) : 0) +
						(x.ItemTrInQty != null ? Convert.ToDecimal(x.ItemTrInQty) : 0) -
						((x.ItemDelQty != null ? Convert.ToDecimal(x.ItemDelQty) : 0) +
						(x.ItemTrOutQty != null ? Convert.ToDecimal(x.ItemTrOutQty) : 0))
					);

					TotValueExpireSoon = ExpireSoonList.Sum(x =>
						((x.ItemOpQty != null ? Convert.ToDecimal(x.ItemOpQty) : 0) +
						(x.ItemPurQty != null ? Convert.ToDecimal(x.ItemPurQty) : 0) +
						(x.ItemTrInQty != null ? Convert.ToDecimal(x.ItemTrInQty) : 0) -
						((x.ItemDelQty != null ? Convert.ToDecimal(x.ItemDelQty) : 0) +
						(x.ItemTrOutQty != null ? Convert.ToDecimal(x.ItemTrOutQty) : 0))) * (x.ItemCp != null ? Convert.ToDecimal(x.ItemCp) : 0)
					);

					var args = new RangePickerEventArgs<DateTime?>
						{
							StartDate = selectedRange.selectedRangeFrom,
							EndDate = selectedRange.selectedRangeTo
						};
					await ValueChangeHandler(args);
				}
			}
			this.SpinnerVisible = false;
			await InvokeAsync(StateHasChanged);

		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}

	private async Task OnMethodChanged(ChangeArgs<string> args)
	{
		if (args.Value == "ByCustomer")
		{
			SelectedMethod = "ByCustomer";
			await Ps1();
		}
		else
		{
			SelectedMethod="ByDate";
			await Ps();
		}
	}

	public async Task ValueChangeHandlerAll(RangePickerEventArgs<DateTime?> args)
	{
		try
		{
			if (iam == "01")
			{
				this.SpinnerVisible = true;
				selectedRange.selectedRangeFrom = selectedRangeAll.selectedRangeFromAll;
				selectedRange.selectedRangeTo = selectedRangeAll.selectedRangeToAll;
				selectedRangeL2H.selectedRangeFromL2H = selectedRangeAll.selectedRangeFromAll;
				selectedRangeL2H.selectedRangeToL2H = selectedRangeAll.selectedRangeToAll;
				selectedRangePurchByGrp.selectedRangeFromPurchByGrp = selectedRangeAll.selectedRangeFromAll;
				selectedRangePurchByGrp.selectedRangeToPurchByGrp = selectedRangeAll.selectedRangeToAll;
				selectedRangeSalesByCust.selectedRangeFromSalesByCust = selectedRangeAll.selectedRangeFromAll;
				selectedRangeSalesByCust.selectedRangeToSalesByCust = selectedRangeAll.selectedRangeToAll;
				selectedRangeDiff.selectedRangeFromDiff = selectedRangeAll.selectedRangeFromAll;
				selectedRangeDiff.selectedRangeToDiff = selectedRangeAll.selectedRangeToAll;
				selectedRangePs.selectedRangeFromPs = selectedRangeAll.selectedRangeFromAll;
				selectedRangePs.selectedRangeToPs = selectedRangeAll.selectedRangeToAll;
				selectedRangePv.selectedRangeFromPv = selectedRangeAll.selectedRangeFromAll;
				selectedRangePv.selectedRangeToPv = selectedRangeAll.selectedRangeToAll;
				selectedRangeSv.selectedRangeFromSv = selectedRangeAll.selectedRangeFromAll;
				selectedRangeSv.selectedRangeToSv = selectedRangeAll.selectedRangeToAll;
				selectedRangeSalesByGrp.selectedRangeFromSalesByGrp = selectedRangeAll.selectedRangeFromAll;
				selectedRangeSalesByGrp.selectedRangeToSalesByGrp = selectedRangeAll.selectedRangeToAll;
				selectedRangeComm.selectedRangeFromComm = selectedRangeAll.selectedRangeFromAll;
				selectedRangeComm.selectedRangeToComm = selectedRangeAll.selectedRangeToAll;



				await ValueChangeHandler(args);
				await ValueChangeHandlerPv(args);
				await ValueChangeHandlerSv(args);
				await ValueChangeHandlerDiff(args);
				await ValueChangeHandlerL2H(args);
				await ValueChangeHandlerComm(args);
				await Ps();
				await PurchbyGrp();
				await SalesbyGrp();
				await SalesbyCust();
				this.SpinnerVisible = false;
				await InvokeAsync(StateHasChanged);			}
		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}
	public async Task ValueChangeHandler(RangePickerEventArgs<DateTime?> args)
	{
		try
		{
			this.SpinnerVisible = true;
			DateTime StDate = args.StartDate.Value.AddDays(0);
			DateTime EnDate = args.EndDate.Value.AddDays(1);

			var start = StDate.Date;
			var endExclusive = EnDate.Date;
			var ExpiredList = StockList.Where(x => x.ItemExpiryDate >= start && x.ItemExpiryDate < endExclusive);
			TotExpired = ExpiredList.Sum(x =>
				(x.ItemOpQty != null ? Convert.ToDecimal(x.ItemOpQty) : 0) +
				(x.ItemPurQty != null ? Convert.ToDecimal(x.ItemPurQty) : 0) +
				(x.ItemTrInQty != null ? Convert.ToDecimal(x.ItemTrInQty) : 0) -
				((x.ItemDelQty != null ? Convert.ToDecimal(x.ItemDelQty) : 0) +
				(x.ItemTrOutQty != null ? Convert.ToDecimal(x.ItemTrOutQty) : 0))
			);

			TotValueExpired = ExpiredList.Sum(x =>
				((x.ItemOpQty != null ? Convert.ToDecimal(x.ItemOpQty) : 0) +
				(x.ItemPurQty != null ? Convert.ToDecimal(x.ItemPurQty) : 0) +
				(x.ItemTrInQty != null ? Convert.ToDecimal(x.ItemTrInQty) : 0) -
				((x.ItemDelQty != null ? Convert.ToDecimal(x.ItemDelQty) : 0) +
				(x.ItemTrOutQty != null ? Convert.ToDecimal(x.ItemTrOutQty) : 0))) * (x.ItemCp != null ? Convert.ToDecimal(x.ItemCp) : 0)
			);
			await InvokeAsync(StateHasChanged);
			this.SpinnerVisible = false;
		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}
	public async Task ValueChangeHandlerPv(RangePickerEventArgs<DateTime?> args)
	{
		try
		{
			this.SpinnerVisible = true;
			DateTime StDate = args.StartDate.Value;
			DateTime EnDate = args.EndDate.Value;
			var IncomingList = await myvwReceiptService.GetvwReceiptsDate(StDate.AddDays(0), EnDate.AddDays(1));
			//var IncomingList = await myvwReceiptService.GetvwReceiptsDate(StDate.AddDays(-1), EnDate.AddDays(1));
			TotPurchValue = IncomingList.Sum(x => (Convert.ToDecimal(x.RdTotal)));
			await InvokeAsync(StateHasChanged);
			this.SpinnerVisible = false;
		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}
	public async Task ValueChangeHandlerSv(RangePickerEventArgs<DateTime?> args)
	{
		try
		{
			this.SpinnerVisible = true;
			DateTime StDate = args.StartDate.Value;
			DateTime EnDate = args.EndDate.Value;
			var OutgoingList = await myvwSaleService.GetvwSalesDate(StDate.AddDays(0), EnDate.AddDays(1));
			//var OutgoingList = await myvwSaleService.GetvwSalesDate(StDate.AddDays(-1), EnDate.AddDays(1));
			TotSaleValue = OutgoingList.Sum(x => (Convert.ToDecimal(x.DelTotal)));
			await InvokeAsync(StateHasChanged);
			this.SpinnerVisible = false;
		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}

	public async Task ValueChangeHandlerDiff(RangePickerEventArgs<DateTime?> args)
	{
		try
		{
			this.SpinnerVisible = true;
			DateTime StDate = args.StartDate.Value;
			DateTime EnDate = args.EndDate.Value;
			var OutgoingList = await myvwSaleService.GetvwSalesDate(StDate.AddDays(0), EnDate.AddDays(1));
			//var OutgoingList = await myvwSaleService.GetvwSalesDate(StDate.AddDays(-1), EnDate.AddDays(1));
			TotDiff = OutgoingList.Sum(x => (Convert.ToDecimal(x.Gross)));
			if (OutgoingList.Sum(x => (Convert.ToDecimal(x.DelTotal))) > 0)
			{
				Marg = 100 * (TotDiff / OutgoingList.Sum(x => (Convert.ToDecimal(x.DelTotal))));
			}
			else
			{
				Marg = 0;
			}
			await InvokeAsync(StateHasChanged);
			this.SpinnerVisible = false;
		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}

	public async Task ValueChangeHandlerL2H(RangePickerEventArgs<DateTime?> args)
	{
		try
		{
			this.SpinnerVisible = true;
			DateTime StDate = args.StartDate.Value;
			DateTime EnDate = args.EndDate.Value;
			await myTrDetailService.UpdateTrdRev();  // update TrdRev to false 
			TrDetailList = await myTrDetailService.GetTrDetls();
			TrDetailListSelect = TrDetailList;
			var Qry2 = await myTrDetailService.GetTrDetls(StDate.AddDays(0), EnDate.AddDays(1));
			var Qry = Qry2.Where(x => x.TrdReversal == "Reversal").ToList();
			var Qry1 = Qry.ToList();
			foreach (var q in Qry1)
			{
				Qry.AddRange(TrDetailListSelect.Where(y => y.TrdId == q.TrdIdRevJourn));
			}
			TrDetailListSelect = new List<TrDetail>(Qry);
			foreach (var transfer in TrDetailListSelect)
			{
				transfer.TrdRev = true;
				await myTrDetailService.UpdateTrDetl(transfer);
			}
			TransferListAll = await myvwTransferService.GetvwTransfers();
			TransferList = await myvwTransferService.GetvwTransfersDate(StDate.AddDays(0), EnDate.AddDays(1));

			// var AlertList = TransferList;
			// AlertList=AlertList.Where(qm => qm.TrdBalJournQty != 0 && qm.TrdBalJournQty != null && ( qm.TrdLotChange==null || qm.TrdLotChange =="")).ToList();
			// TotAlertValue = AlertList.Sum(x => (Convert.ToDecimal(x.AlertAmt)));


			var ReversalList=TransferListAll.Where(q => q.TrdRev == true && (q.TrdLotChange == "" || q.TrdLotChange == null)).ToList();
			TotRevValue=ReversalList.Sum(x => (Convert.ToDecimal(x.RevAmt)));
			TransferList3 = TransferList;
			TransferList = TransferList.Where(q => q.TrdRev == false && (q.TrdLotChange == "" || q.TrdLotChange == null)).ToList();
			TotNonAlertValue = TransferList.Sum(x => (Convert.ToDecimal(x.NonAlertAmt)));
			TotL2H = TotNonAlertValue + TotRevValue;
			await myvwTransferService.UpdateAction();
			await Task.Delay(100);
			var ActionList = TransferList3.Where(q => q.TrdAction == true  && (q.TrdLotChange == "" || q.TrdLotChange == null)).ToList();
			TotAlertValue = ActionList.Sum(x => (Convert.ToDecimal(x.AlertAmt)));

			// // if (TotNonAlertValue > 0)
			// // {
			// // 	MargRev = 100 * (TotRevValue / TotNonAlertValue);
			// // }
			// // else
			// // {
			// // 	MargRev = 0;
			// // }

			 await InvokeAsync(StateHasChanged);
			this.SpinnerVisible = false;

		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}

	public async Task ValueChangeHandlerComm(RangePickerEventArgs<DateTime?> args)
	{
		try
		{
			this.SpinnerVisible = true;
			DateTime StDate = args.StartDate.Value;
			DateTime EnDate = args.EndDate.Value;
			CommChargeList = await myCommChargeService.GetCommChargeDate(StDate.AddDays(0), EnDate.AddDays(1));
			TotCommCharges = CommChargeList.Sum(x => (Convert.ToDecimal(x.CommAmt)));
			 await InvokeAsync(StateHasChanged);
			this.SpinnerVisible = false;
		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}


	public async Task ValueChangeHandlerPs(RangePickerEventArgs<DateTime?> args)
	{
		if(SelectedMethod=="ByDate")
		{
			await Ps();
		}
		else
		{
			await Ps1();
		}
	}

	public async Task ValueChangeHandlerSalesByGrp(RangePickerEventArgs<DateTime?> args)
	{
		await SalesbyGrp();
	}
	private async Task OnGroupChanged3(MultiSelectChangeEventArgs<string[]> args)
	{
		vGrpArray3 = args.Value;
		await SalesbyGrp();
	}

	public async Task ValueChangeHandlerPurchByGrp(RangePickerEventArgs<DateTime?> args)
	{
		await PurchbyGrp();
	}

	private async Task OnGroupChanged2(MultiSelectChangeEventArgs<string[]> args)
	{  
		vGrpArray2 = args.Value;
		await PurchbyGrp();
	}


	// private async Task ValueChangeGrp2(MultiSelectChangeEventArgs<string[]> args)
	// {
	// 	//vGrpArray = Array.Empty<string>();
	// 	vGrpArray2= args.Value;
	// 	await PurchbyGrp();
	// }

	// private async Task ValueChangeGrp3(MultiSelectChangeEventArgs<string[]> args)
	// {
	// 	//vGrpArray = Array.Empty<string>();
	// 	vGrpArray3 = args.Value;
	// 	await SalesbyGrp();
	// }


	public async Task PurchbyGrp()
	{
		try
		{
			this.SpinnerVisible = true;
			var IncomingList2 = new List<VwReceipt>();
			DateTime stDate = selectedRangePurchByGrp.selectedRangeFromPurchByGrp.Value;
			DateTime enDate = selectedRangePurchByGrp.selectedRangeToPurchByGrp.Value;
			var vIncomingList2 = await myvwReceiptService.GetvwReceiptsDate(stDate.AddDays(0), enDate.AddDays(1));

			if (vGrpArray2 != null && vGrpArray2.Length > 0)
			{
				var filteredList = vIncomingList2.Where(v => vGrpArray2.Contains(v.RdStkIdGrp)).ToList();
				IncomingList2 = filteredList;
			}
			else
			{
				IncomingList2 = vIncomingList2.ToList();
			}
			var tt2 = IncomingList2
						.GroupBy(r => new { r.GrpDesc })
						.Select(g => new RenderingPurchData
							{
								X = g.Key.GrpDesc,
								Y = g.Sum(r => Convert.ToDecimal(r.RdTotal))
							}).ToList();
			renderingPurchDataSumm = tt2;
			TotPurchases = (decimal)renderingPurchDataSumm.Sum(x => x.Y);
			 await InvokeAsync(StateHasChanged);
			this.SpinnerVisible = false;

		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}

	public async Task SalesbyGrp()
	{
		try
		{
			this.SpinnerVisible = true;
			var outgoingList = new List<VwSale>();
			DateTime stDate = selectedRangeSalesByGrp.selectedRangeFromSalesByGrp.Value;
			DateTime enDate = selectedRangeSalesByGrp.selectedRangeToSalesByGrp.Value;
			var vOutgoingList = await myvwSaleService.GetvwSalesDate(stDate.AddDays(0), enDate.AddDays(1));
			if (vGrpArray3 != null && vGrpArray3.Length > 0)
			{
				var filteredList = vOutgoingList.Where(v => vGrpArray3.Contains(v.DelStkIdGrp)).ToList();
				outgoingList = filteredList;
			}
			else
			{
				outgoingList = vOutgoingList.ToList();
			}
			var tt = outgoingList
						.GroupBy(r => new { r.GrpDesc })
						.Select(g => new RenderingData
                            {
                                X = g.Key.GrpDesc,
                                Y = g.Sum(r => Convert.ToDecimal(r.DelTotal))
                            }).ToList();
			renderingDataSumm = tt;
			TotSales = (decimal)renderingDataSumm.Sum(x => x.Y);
			 await InvokeAsync(StateHasChanged);
			this.SpinnerVisible = false;
		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}



	private async Task OnGroupChanged(MultiSelectChangeEventArgs<string[]> args)
	{
		vGrpArray = args.Value;
		if(SelectedMethod=="ByDate")
		{
			await Ps();
		}
		else
		{
			await Ps1();
		}
	}

	private async Task OnClientChanged(MultiSelectChangeEventArgs<string[]> args)
	{
		vClientArray = args.Value;
		if(SelectedMethod=="ByDate")
		{
			await Ps();
		}
		else
		{
			await Ps1();
		}
	}

	private async Task OnItemChanged(MultiSelectChangeEventArgs<string[]> args)
	{
		vItemArray = args.Value;
		if(SelectedMethod=="ByDate")
		{
			await Ps();
		}
		else
		{
			await Ps1();
		}
	}




	private async Task OnClientChanged2(MultiSelectChangeEventArgs<string[]> args)
	{
		vClientArray2 = args.Value;
		await SalesbyCust();
	}
	private async Task OnItemChanged2(MultiSelectChangeEventArgs<string[]> args)
	{
		vItemArray2 = args.Value;
		await SalesbyCust();
	}



	private async Task OnGroupFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
	{
		args.PreventDefaultAction = true;

		var query = string.IsNullOrWhiteSpace(args.Text)
			? new Syncfusion.Blazor.Data.Query()
			: new Syncfusion.Blazor.Data.Query().Where(new Syncfusion.Blazor.Data.WhereFilter()
				{
					Field = "GrpDesc",
					Operator = "contains",
					value = args.Text,
					IgnoreCase = true
				});

		await GrpObj.FilterAsync(GroupMasterList, query);
	}

	private async Task OnFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
	{
		// Custom = args.Text;
		// args.PreventDefaultAction = true;
		// var query = new Query().Where(new WhereFilter() { Field = "ItemDesc", Operator = "contains", value = args.Text, IgnoreCase = true });
		// query = !string.IsNullOrEmpty(args.Text) ? query : new Query();
		// await ComboObj.FilterAsync(ItemMasterList, query);

		args.PreventDefaultAction = true;
		var query = string.IsNullOrWhiteSpace(args.Text)
			? new Syncfusion.Blazor.Data.Query()
			: new Syncfusion.Blazor.Data.Query().Where(new Syncfusion.Blazor.Data.WhereFilter()
				{
					Field = "ItemDesc",
					Operator = "contains",
					value = args.Text,
					IgnoreCase = true
				});

		await ComboObj.FilterAsync(ItemMasterList, query);
	}

	private async Task OnFiltering2(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
	{
		args.PreventDefaultAction = true;
		var query = string.IsNullOrWhiteSpace(args.Text)
			? new Syncfusion.Blazor.Data.Query()
			: new Syncfusion.Blazor.Data.Query().Where(new Syncfusion.Blazor.Data.WhereFilter()
				{
					Field = "ItemDesc",
					Operator = "contains",
					value = args.Text,
					IgnoreCase = true
				});

		await ComboObj2.FilterAsync(ItemMasterList2, query); // ✅ Now this works
	}

	private async Task OnClientFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
	{
		args.PreventDefaultAction = true;

		var query = string.IsNullOrWhiteSpace(args.Text)
			? new Syncfusion.Blazor.Data.Query()
			: new Syncfusion.Blazor.Data.Query().Where(new Syncfusion.Blazor.Data.WhereFilter()
				{
					Field = "ClientName",
					Operator = "contains",
					value = args.Text,
					IgnoreCase = true
				});

		await CliObj.FilterAsync(ClientMasterList, query);
	}

	private async Task OnClientFiltering2(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
	{
		args.PreventDefaultAction = true;

		var query = string.IsNullOrWhiteSpace(args.Text)
			? new Syncfusion.Blazor.Data.Query()
			: new Syncfusion.Blazor.Data.Query().Where(new Syncfusion.Blazor.Data.WhereFilter()
				{
					Field = "ClientName",
					Operator = "contains",
					value = args.Text,
					IgnoreCase = true
				});

		await CliObj2.FilterAsync(ClientMasterList2, query);
	}

	private async Task OnGroupFiltering2(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
	{
		args.PreventDefaultAction = true;

		var query = string.IsNullOrWhiteSpace(args.Text)
			? new Syncfusion.Blazor.Data.Query()
			: new Syncfusion.Blazor.Data.Query().Where(new Syncfusion.Blazor.Data.WhereFilter()
				{
					Field = "GrpDesc",
					Operator = "contains",
					value = args.Text,
					IgnoreCase = true
				});

		await GrpObj2.FilterAsync(GroupMasterList2, query);
	}
	private async Task OnGroupFiltering3(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
	{
		args.PreventDefaultAction = true;

		var query = string.IsNullOrWhiteSpace(args.Text)
			? new Syncfusion.Blazor.Data.Query()
			: new Syncfusion.Blazor.Data.Query().Where(new Syncfusion.Blazor.Data.WhereFilter()
				{
					Field = "GrpDesc",
					Operator = "contains",
					value = args.Text,
					IgnoreCase = true
				});

		await GrpObj3.FilterAsync(GroupMasterList3, query);
	}

	public async Task Ps1()
	{
		try
		{
			this.SpinnerVisible = true;
			DateTime StDate = selectedRangePs.selectedRangeFromPs.Value;
			DateTime EnDate = selectedRangePs.selectedRangeToPs.Value;
			var OutgoingList = await myvwSaleService.GetvwSalesDate(StDate.AddDays(0), EnDate.AddDays(1));
			await Task.Delay(50);
			var IncomingList = await myvwReceiptService.GetvwReceiptsDate(StDate.AddDays(0), EnDate.AddDays(1));
			await Task.Delay(50);
			//StockTransList = await myStockTransService.GetStockTransByDate(StDate.AddDays(0), EnDate.AddDays(1));
			//await Task.Delay(100);
			await myTrDetailService.UpdateTrdRev(); 
			var Qry3 = await myTrDetailService.GetTrDetls(StDate.AddDays(0), EnDate.AddDays(1));
			var Qry2 = (from q3 in Qry3
						join im in ItemMastList on q3.TrdStkIdDesc equals im.ItemId
						where vGrpArray == null || vGrpArray.Length == 0 || vGrpArray.Contains(im.ItemGrpCode)
						where vClientArray == null || vClientArray.Length == 0 || vClientArray.Contains(q3.TrdClientCodeFrom)
						where vItemArray == null || vItemArray.Length == 0 || vItemArray.Contains(q3.TrdListNo)
						select q3).ToList();


			if (vGrpArray != null && vGrpArray.Length > 0)
			{
				var filteredList4 = OutgoingList.Where(v => vGrpArray.Contains(v.DelStkIdGrp)).ToList();
				OutgoingList = filteredList4;
				var filteredList5 = IncomingList.Where(v => vGrpArray.Contains(v.RdStkIdGrp)).ToList();
				IncomingList = filteredList5;

				//StockTransList=StockTransList.Where(v => vGrpArray.Contains(v.ItemStkIdGrp)).ToList();
			}

			if (vClientArray != null && vClientArray.Length > 0)
			{
				var filteredList = OutgoingList.Where(v => vClientArray.Contains(v.DelClientCode)).ToList();
				OutgoingList = filteredList;
				var filteredList1 = IncomingList.Where(v => vClientArray.Contains(v.RdClientCode)).ToList();
				IncomingList = filteredList1;
				//StockTransList=StockTransList.Where(v => vClientArray.Contains(v.ItemClientCode)).ToList();
			}

			if (vItemArray != null && vItemArray.Length > 0)
			{
				var filteredList2 = OutgoingList.Where(v => vItemArray.Contains(v.DelListNo)).ToList();
				OutgoingList = filteredList2;
				var filteredList3 = IncomingList.Where(v => vItemArray.Contains(v.RdListNo)).ToList();
				IncomingList = filteredList3;
				//StockTransList=StockTransList.Where(v => vItemArray.Contains(v.ItemListNo)).ToList();


			}
			var tt = OutgoingList
						.Where(r => !string.IsNullOrEmpty(r.ClientName))
						.GroupBy(r => r.ClientName)
						.Select(g => new Sale
							{
								vMon1 = g.Key.ToString(),
								vAmount = g.Sum(r => Convert.ToDecimal(r.DelTotal))
							}).OrderByDescending(t=>t.vAmount).ToList();
			chartSource = tt;
			TotSalesPs = (decimal)chartSource.Sum(x => x.vAmount);

			var mm = IncomingList
						.Where(r => !string.IsNullOrEmpty(r.ClientName))
						.GroupBy(r => r.ClientName)
						.Select(g => new Purchase
							{
								vMon1 = g.Key.ToString(),
								vAmount = g.Sum(r => Convert.ToDecimal(r.RdTotal))
							}).ToList();
			purchaseSource = mm;
			TotPurchasesPs = (decimal)purchaseSource.Sum(x => x.vAmount);

			var TotDiff1=(decimal)OutgoingList.Sum(x => x.Gross);
			TotMargValue=TotDiff1;

			if (TotSalesPs > 0)
			{
				TotMarg = 100 * (TotDiff1 / TotSalesPs);
			}
			else
			{
				TotMarg = 0;
			}

            //TotStkQty = Convert.ToDecimal(StockTransList.Sum(d => (d.ItemTrOpQty ?? 0) + (d.ItemTrInQty ?? 0) + (d.ItemPurQty ?? 0) - ((d.ItemDelQty ?? 0) + (d.ItemTrOutQty ?? 0))));
			//TotStkAmt = Convert.ToDecimal(StockTransList.Sum(d => ((d.ItemTrOpQty ?? 0) + (d.ItemTrInQty ?? 0) + (d.ItemPurQty ?? 0) - ((d.ItemDelQty ?? 0) + (d.ItemTrOutQty ?? 0)))*d.ItemCp));
			//TotStkAmt = Convert.ToDecimal(StockTransList.Sum(d => ((d.ItemTrOpAmt ?? 0) + (d.ItemTrInAmt ?? 0) + (d.ItemPurAmt ?? 0) - ((d.ItemDelAmt ?? 0) + (d.ItemTrOutAmt ?? 0)))));

			var Qry9 = await myTrDetailService.GetTrDetls();
			TrDetailList2 = (from q9 in Qry9 join imast in ItemMastList on q9.TrdStkIdDesc equals imast.ItemId 
								where vGrpArray == null || vGrpArray.Length == 0 || vGrpArray.Contains(imast.ItemGrpCode)
								where vClientArray == null || vClientArray.Length == 0 || vClientArray.Contains(q9.TrdClientCodeFrom)
								where vItemArray == null || vItemArray.Length == 0 || vItemArray.Contains(q9.TrdListNo)
								select q9).ToList();


			TrDetailListSelect2 = TrDetailList2;
			var Qry = Qry2.Where(x => x.TrdReversal == "Reversal").ToList();
            var Qry1 = Qry.ToList();
            foreach (var q in Qry1)
            {
                Qry.AddRange(TrDetailListSelect2.Where(y => y.TrdId == q.TrdIdRevJourn));
            }
            TrDetailListSelect2 = new List<TrDetail>(Qry);
			foreach (var transfer in TrDetailListSelect2)
            {
                transfer.TrdRev = true;
                await myTrDetailService.UpdateTrDetl(transfer);
            }

 		    TransferListAll2 = await myvwTransferService.GetvwTransfers();
			if (vClientArray != null && vClientArray.Length > 0)
			{
			   TransferListAll2 = TransferListAll2.Where(v => vClientArray.Contains(v.TrdClientCodeFrom)).ToList();
			}
			if (vItemArray != null && vItemArray.Length > 0)
			{
			    TransferListAll2 = TransferListAll2.Where(v => vItemArray.Contains(v.TrdListNo)).ToList();
			}
			if (vGrpArray != null && vGrpArray.Length > 0)
			{
			    TransferListAll2 = TransferListAll2.Where(v => vGrpArray.Contains(v.ItemGrpCode)).ToList();
			}

			var ReversalList2=TransferListAll2.Where(q => q.TrdRev == true && (q.TrdLotChange == "" || q.TrdLotChange == null)).ToList();
			TotRevValue2=ReversalList2.Sum(x => (Convert.ToDecimal(x.RevAmt)));

			TransferList2 = await myvwTransferService.GetvwTransfersDate(StDate.AddDays(0), EnDate.AddDays(1));
			if (vClientArray != null && vClientArray.Length > 0)
			{
			   TransferList2 = TransferList2.Where(v => vClientArray.Contains(v.TrdClientCodeFrom)).ToList();
			}
			if (vItemArray != null && vItemArray.Length > 0)
			{
			    TransferList2 = TransferList2.Where(v => vItemArray.Contains(v.TrdListNo)).ToList();
			}
			if (vGrpArray != null && vGrpArray.Length > 0)
			{
			    TransferList2 = TransferList2.Where(v => vGrpArray.Contains(v.ItemGrpCode)).ToList();
			}
			TransferList2 = TransferList2.Where(q => q.TrdRev == false && (q.TrdLotChange == "" || q.TrdLotChange == null)).ToList();
			TotNonAlertValue2 = TransferList2.Sum(x => (Convert.ToDecimal(x.NonAlertAmt)));
			TotL2H2 = TotNonAlertValue2 + TotRevValue2;


			//TotL2H2To

			await myTrDetailService.UpdateTrdRev(); 
			var Qry33 = await myTrDetailService.GetTrDetls(StDate.AddDays(0), EnDate.AddDays(1));
			var Qry22 = (from q3 in Qry33
            join im in ItemMastList on q3.TrdStkIdDesc equals im.ItemId
            where vGrpArray == null || vGrpArray.Length == 0 || vGrpArray.Contains(im.ItemGrpCode)
            where vClientArray == null || vClientArray.Length == 0 || vClientArray.Contains(q3.TrdClientCodeTo)
            where vItemArray == null || vItemArray.Length == 0 || vItemArray.Contains(q3.TrdListNo)
            select q3).ToList();

			var Qry9a = await myTrDetailService.GetTrDetls();
			TrDetailList2 = (from q9 in Qry9a join imast in ItemMastList on q9.TrdStkIdDesc equals imast.ItemId 
								where vGrpArray == null || vGrpArray.Length == 0 || vGrpArray.Contains(imast.ItemGrpCode)
								where vClientArray == null || vClientArray.Length == 0 || vClientArray.Contains(q9.TrdClientCodeTo)
								where vItemArray == null || vItemArray.Length == 0 || vItemArray.Contains(q9.TrdListNo)
								select q9).ToList();

			TrDetailListSelect2 = TrDetailList2;
			var QryM = Qry22.Where(x => x.TrdReversal == "Reversal").ToList();
            var Qry11 = QryM.ToList();
            foreach (var q in Qry11)
            {
                QryM.AddRange(TrDetailListSelect2.Where(y => y.TrdId == q.TrdIdRevJourn));
            }
            TrDetailListSelect2 = new List<TrDetail>(QryM);
			foreach (var transfer in TrDetailListSelect2)
            {
                transfer.TrdRev = true;
                await myTrDetailService.UpdateTrDetl(transfer);
            }

 		    TransferListAll2 = await myvwTransferService.GetvwTransfers();
			if (vClientArray != null && vClientArray.Length > 0)
			{
			   TransferList2 = TransferList2.Where(v => vClientArray.Contains(v.TrdClientCodeTo)).ToList();
			}
			if (vItemArray != null && vItemArray.Length > 0)
			{
			    TransferList2 = TransferList2.Where(v => vItemArray.Contains(v.TrdListNo)).ToList();
			}
			if (vGrpArray != null && vGrpArray.Length > 0)
			{
			    TransferList2 = TransferList2.Where(v => vGrpArray.Contains(v.ItemGrpCode)).ToList();
			}
			var ReversalList22=TransferListAll2.Where(q => q.TrdRev == true && (q.TrdLotChange == "" || q.TrdLotChange == null)).ToList();
			TotRevValue2=ReversalList22.Sum(x => (Convert.ToDecimal(x.RevAmt)));

			TransferList2 = await myvwTransferService.GetvwTransfersDate(StDate.AddDays(0), EnDate.AddDays(1));
			if (vClientArray != null && vClientArray.Length > 0)
			{
			   TransferList2 = TransferList2.Where(v => vClientArray.Contains(v.TrdClientCodeTo)).ToList();
			}
			if (vItemArray != null && vItemArray.Length > 0)
			{
			    TransferList2 = TransferList2.Where(v => vItemArray.Contains(v.TrdListNo)).ToList();
			}
			if (vGrpArray != null && vGrpArray.Length > 0)
			{
			    TransferList2 = TransferList2.Where(v => vGrpArray.Contains(v.ItemGrpCode)).ToList();
			}
			TransferList2 = TransferList2.Where(q => q.TrdRev == false && (q.TrdLotChange == "" || q.TrdLotChange == null)).ToList();
			TotNonAlertValue2 = TransferList2.Sum(x => (Convert.ToDecimal(x.NonAlertAmt)));
			TotL2H2To = TotNonAlertValue2 + TotRevValue2;

		    await InvokeAsync(StateHasChanged);
			this.SpinnerVisible = false;

		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}		
	}

	public async Task Ps()
	{
		try
		{
			this.SpinnerVisible = true;
			DateTime StDate = selectedRangePs.selectedRangeFromPs.Value;
			DateTime EnDate = selectedRangePs.selectedRangeToPs.Value;
			var OutgoingList = await myvwSaleService.GetvwSalesDate(StDate.AddDays(0), EnDate.AddDays(1));
		    await Task.Delay(50);
			var IncomingList = await myvwReceiptService.GetvwReceiptsDate(StDate.AddDays(0), EnDate.AddDays(1));
			await Task.Delay(50);
			//StockTransList = await myStockTransService.GetStockTransByDate(StDate.AddDays(0), EnDate.AddDays(1));
			//await Task.Delay(100);
			await myTrDetailService.UpdateTrdRev(); 
			var Qry3 = await myTrDetailService.GetTrDetls(StDate.AddDays(0), EnDate.AddDays(1));
			var Qry2 = (from q3 in Qry3
						join im in ItemMastList on q3.TrdStkIdDesc equals im.ItemId
						where vGrpArray == null || vGrpArray.Length == 0 || vGrpArray.Contains(im.ItemGrpCode)
						where vClientArray == null || vClientArray.Length == 0 || vClientArray.Contains(q3.TrdClientCodeFrom)
						where vItemArray == null || vItemArray.Length == 0 || vItemArray.Contains(q3.TrdListNo)
						select q3).ToList();


			if (vGrpArray != null && vGrpArray.Length > 0)
			{
				var filteredList4 = OutgoingList.Where(v => vGrpArray.Contains(v.DelStkIdGrp)).ToList();
				OutgoingList = filteredList4;
				var filteredList5 = IncomingList.Where(v => vGrpArray.Contains(v.RdStkIdGrp)).ToList();
				IncomingList = filteredList5;

				//StockTransList=StockTransList.Where(v => vGrpArray.Contains(v.ItemStkIdGrp)).ToList();
			}

			if (vClientArray != null && vClientArray.Length > 0)
			{
				var filteredList = OutgoingList.Where(v => vClientArray.Contains(v.DelClientCode)).ToList();
				OutgoingList = filteredList;
				var filteredList1 = IncomingList.Where(v => vClientArray.Contains(v.RdClientCode)).ToList();
				IncomingList = filteredList1;
				//StockTransList=StockTransList.Where(v => vClientArray.Contains(v.ItemClientCode)).ToList();
			}

			if (vItemArray != null && vItemArray.Length > 0)
			{
				var filteredList2 = OutgoingList.Where(v => vItemArray.Contains(v.DelListNo)).ToList();
				OutgoingList = filteredList2;
				var filteredList3 = IncomingList.Where(v => vItemArray.Contains(v.RdListNo)).ToList();
				IncomingList = filteredList3;
				//StockTransList=StockTransList.Where(v => vItemArray.Contains(v.ItemListNo)).ToList();
			}
			var tt = OutgoingList
							.Where(r => r.DelDate.HasValue)
							.GroupBy(r => r.DelDate.Value.Date)
							.Select(g => new Sale
							{
								vMon = g.Key.ToString("dd"),
								vAmount = g.Sum(r => Convert.ToDecimal(r.DelTotal))
							}).ToList();
				chartSource = tt;
				TotSalesPs = (decimal)chartSource.Sum(x => x.vAmount);

		   var mm = IncomingList
							.Where(r => r.RdVendInvDate.HasValue)
							.GroupBy(r => r.RdVendInvDate.Value.Date)
							.Select(g => new Purchase
							{
								vMon = g.Key.Date.ToString("dd"),
								vAmount = g.Sum(r => Convert.ToDecimal(r.RdTotal))
							}).ToList();
				purchaseSource = mm;
				TotPurchasesPs = (decimal)purchaseSource.Sum(x => x.vAmount);

			var TotDiff1=(decimal)OutgoingList.Sum(x => x.Gross);
			TotMargValue=TotDiff1;

			if (TotSalesPs > 0)
			{
				TotMarg = 100 * (TotDiff1 / TotSalesPs);
			}
			else
			{
				TotMarg = 0;
			}

            //TotStkQty = Convert.ToDecimal(StockTransList.Sum(d => ((d.ItemTrOpQty ?? 0) + (d.ItemTrInQty ?? 0) + (d.ItemPurQty ?? 0)) - ((d.ItemDelQty ?? 0) + (d.ItemTrOutQty ?? 0))));
			//TotStkAmt = Convert.ToDecimal(StockTransList.Sum(d => ((d.ItemTrOpQty ?? 0) + (d.ItemTrInQty ?? 0) + (d.ItemPurQty ?? 0) - ((d.ItemDelQty ?? 0) + (d.ItemTrOutQty ?? 0)))*d.ItemCp));
			//TotStkAmt = Convert.ToDecimal(StockTransList.Sum(d => (((d.ItemTrOpAmt ?? 0) + (d.ItemTrInAmt ?? 0) + (d.ItemPurAmt ?? 0)) - ((d.ItemDelAmt ?? 0) + (d.ItemTrOutAmt ?? 0)))));

			var Qry9b = await myTrDetailService.GetTrDetls();
			TrDetailList2 = (from q9 in Qry9b join imast in ItemMastList on q9.TrdStkIdDesc equals imast.ItemId 
								where vGrpArray == null || vGrpArray.Length == 0 || vGrpArray.Contains(imast.ItemGrpCode)
								where vClientArray == null || vClientArray.Length == 0 || vClientArray.Contains(q9.TrdClientCodeFrom)
								where vItemArray == null || vItemArray.Length == 0 || vItemArray.Contains(q9.TrdListNo)
								select q9).ToList();
			TrDetailListSelect2 = TrDetailList2;
			var Qry = Qry2.Where(x => x.TrdReversal == "Reversal").ToList();
            var Qry1 = Qry.ToList();
            foreach (var q in Qry1)
            {
                Qry.AddRange(TrDetailListSelect2.Where(y => y.TrdId == q.TrdIdRevJourn));
            }
            TrDetailListSelect2 = new List<TrDetail>(Qry);
			foreach (var transfer in TrDetailListSelect2)
            {
                transfer.TrdRev = true;
                await myTrDetailService.UpdateTrDetl(transfer);
            }

 		    TransferListAll2 = await myvwTransferService.GetvwTransfers();
			if (vClientArray != null && vClientArray.Length > 0)
			{
			   TransferListAll2 = TransferListAll2.Where(v => vClientArray.Contains(v.TrdClientCodeFrom)).ToList();
			}
			if (vItemArray != null && vItemArray.Length > 0)
			{
			    TransferListAll2 = TransferListAll2.Where(v => vItemArray.Contains(v.TrdListNo)).ToList();
			}
			if (vGrpArray != null && vGrpArray.Length > 0)
			{
			    TransferListAll2 = TransferListAll2.Where(v => vGrpArray.Contains(v.ItemGrpCode)).ToList();
			}
			var ReversalList2=TransferListAll2.Where(q => q.TrdRev == true && (q.TrdLotChange == "" || q.TrdLotChange == null)).ToList();
			TotRevValue2=ReversalList2.Sum(x => (Convert.ToDecimal(x.RevAmt)));

			TransferList2 = await myvwTransferService.GetvwTransfersDate(StDate.AddDays(0), EnDate.AddDays(1));
			if (vClientArray != null && vClientArray.Length > 0)
			{
			   TransferList2 = TransferList2.Where(v => vClientArray.Contains(v.TrdClientCodeFrom)).ToList();
			}
			if (vItemArray != null && vItemArray.Length > 0)
			{
			    TransferList2 = TransferList2.Where(v => vItemArray.Contains(v.TrdListNo)).ToList();
			}
			if (vGrpArray != null && vGrpArray.Length > 0)
			{
			    TransferList2 = TransferList2.Where(v => vGrpArray.Contains(v.ItemGrpCode)).ToList();
			}
			TransferList2 = TransferList2.Where(q => q.TrdRev == false && (q.TrdLotChange == "" || q.TrdLotChange == null)).ToList();
			TotNonAlertValue2 = TransferList2.Sum(x => (Convert.ToDecimal(x.NonAlertAmt)));
			TotL2H2 = TotNonAlertValue2 + TotRevValue2;

			//TotL2H2To
			await myTrDetailService.UpdateTrdRev(); 
			var Qry33 = await myTrDetailService.GetTrDetls(StDate.AddDays(0), EnDate.AddDays(1));
			var Qry22 = (from q3 in Qry33
            join im in ItemMastList on q3.TrdStkIdDesc equals im.ItemId
            where vGrpArray == null || vGrpArray.Length == 0 || vGrpArray.Contains(im.ItemGrpCode)
            where vClientArray == null || vClientArray.Length == 0 || vClientArray.Contains(q3.TrdClientCodeTo)
            where vItemArray == null || vItemArray.Length == 0 || vItemArray.Contains(q3.TrdListNo)
            select q3).ToList();

			var Qry9c = await myTrDetailService.GetTrDetls();
			TrDetailList2 = (from q9 in Qry9c join imast in ItemMastList on q9.TrdStkIdDesc equals imast.ItemId 
								where vGrpArray == null || vGrpArray.Length == 0 || vGrpArray.Contains(imast.ItemGrpCode)
								where vClientArray == null || vClientArray.Length == 0 || vClientArray.Contains(q9.TrdClientCodeTo)
								where vItemArray == null || vItemArray.Length == 0 || vItemArray.Contains(q9.TrdListNo)
								select q9).ToList();

			TrDetailListSelect2 = TrDetailList2;
			var QryM = Qry22.Where(x => x.TrdReversal == "Reversal").ToList();
            var Qry11 = QryM.ToList();
            foreach (var q in Qry11)
            {
                QryM.AddRange(TrDetailListSelect2.Where(y => y.TrdId == q.TrdIdRevJourn));
            }
            TrDetailListSelect2 = new List<TrDetail>(QryM);
			foreach (var transfer in TrDetailListSelect2)
            {
                transfer.TrdRev = true;
                await myTrDetailService.UpdateTrDetl(transfer);
            }

 		    TransferListAll2 = await myvwTransferService.GetvwTransfers();
			if (vClientArray != null && vClientArray.Length > 0)
			{
			   TransferListAll2 = TransferListAll2.Where(v => vClientArray.Contains(v.TrdClientCodeTo)).ToList();
			}
			if (vItemArray != null && vItemArray.Length > 0)
			{
			    TransferListAll2 = TransferListAll2.Where(v => vItemArray.Contains(v.TrdListNo)).ToList();
			}
			if (vGrpArray != null && vGrpArray.Length > 0)
			{
			    TransferListAll2 = TransferListAll2.Where(v => vGrpArray.Contains(v.ItemGrpCode)).ToList();
			}

			var ReversalList22=TransferListAll2.Where(q => q.TrdRev == true && (q.TrdLotChange == "" || q.TrdLotChange == null)).ToList();
			TotRevValue2=ReversalList22.Sum(x => (Convert.ToDecimal(x.RevAmt)));

			TransferList2 = await myvwTransferService.GetvwTransfersDate(StDate.AddDays(0), EnDate.AddDays(1));
			if (vClientArray != null && vClientArray.Length > 0)
			{
			   TransferList2 = TransferList2.Where(v => vClientArray.Contains(v.TrdClientCodeTo)).ToList();
			}
			if (vItemArray != null && vItemArray.Length > 0)
			{
			    TransferList2 = TransferList2.Where(v => vItemArray.Contains(v.TrdListNo)).ToList();
			}
			if (vGrpArray != null && vGrpArray.Length > 0)
			{
			    TransferList2 = TransferList2.Where(v => vGrpArray.Contains(v.ItemGrpCode)).ToList();
			}
			TransferList2 = TransferList2.Where(q => q.TrdRev == false && (q.TrdLotChange == "" || q.TrdLotChange == null)).ToList();
			TotNonAlertValue2 = TransferList2.Sum(x => (Convert.ToDecimal(x.NonAlertAmt)));
			TotL2H2To = TotNonAlertValue2 + TotRevValue2;

			await InvokeAsync(StateHasChanged);
			this.SpinnerVisible = false;

		}
		catch (Exception ex)
		{
			this.SpinnerVisible = false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}


	public async Task ValueChangeHandlerSalesByCust(RangePickerEventArgs<DateTime?> args)
	{
		await SalesbyCust();
	}

	public async Task SalesbyCust()
	{
		try
		{
			this.SpinnerVisible = true;
			DateTime stDate = selectedRangeSalesByCust.selectedRangeFromSalesByCust.Value;
			DateTime enDate = selectedRangeSalesByCust.selectedRangeToSalesByCust.Value;
			var vOutgoingList1 = await myvwSaleService.GetvwSalesDate(stDate.AddDays(0), enDate.AddDays(1));
			if (vClientArray2 != null && vClientArray2.Length > 0)
			{
				var filteredList4 = vOutgoingList1.Where(v => vClientArray2.Contains(v.DelClientCode)).ToList();
				vOutgoingList1 = filteredList4;
			}

			if (vItemArray2 != null && vItemArray2.Length > 0)
			{
				var filteredList5 = vOutgoingList1.Where(v => vItemArray2.Contains(v.DelListNo)).ToList();
				vOutgoingList1 = filteredList5;
			}

			if ((vClientArray2 != null && vClientArray2.Length > 0) || (vItemArray2 != null && vItemArray2.Length > 0))
			{
				var kk = vOutgoingList1
					.GroupBy (s => new { s.ClientName, s.ItemDesc })
					.Select (g => new CustomerItemStat
					{
						Customer = g.Key.ClientName,
						Item = g.Key.ItemDesc,
						Quantity = g.Sum(s => Convert.ToDecimal(s.DelQty))
					}).ToList();
				groupedData = kk;
				TotQty=(decimal)groupedData.Sum(x => x.Quantity);
				uniqueItems = kk.Select(x => x.Item).Distinct().ToList();
				TotValue=(decimal)vOutgoingList1.Sum(x => x.DelTotal);
				 await InvokeAsync(StateHasChanged);
			}
			this.SpinnerVisible=false;
		}
		catch (Exception ex)
		{
			this.SpinnerVisible=false;
			await JSRuntime.InvokeVoidAsync("alert", ex.Message);
			return;
		}
	}
}

<style>
	.e-panel-header {
		text-align: left;
	}

	.e-panel-content {
		text-align: center;
	}

	.income-container {
		font-size: x-large;
		color: #17a00e;
		margin-top: 14px;
	}

	.expense-container {
		color: #ca765a;
		font-size: x-large;
		margin-top: 14px;
	}

	.in-container {
		font-size: x-large;
		color: #17a00e;
		margin-top: 14px;
		padding: 15px;
	}

	.ex-container {
		color: #ca765a;
		font-size: x-large;
		margin-top: 14px;
		padding: 15px;
	}

	.e-dashboardlayout.e-control .e-panel .e-panel-container .e-panel-header {
		color: #754131;
		background-color: #c9e2f7;
	}

	.category-icon {
		float: left;
		background-repeat: no-repeat;
		background-position-x: center;
		background-size: 100%;
		height: 30px;
		width: 30px;
		display: inline-block;
		margin-right: 10px;
	}

		.category-icon.food {
			background-image: url('food.png');
		}

		.category-icon.Travel {
			background-image: url('Travel.png');
		}

		.category-icon.housing {
			background-image: url('housing.png');
		}

		.category-icon.extra-income {
			background-image: url('extra income.jpg');
		}

</style>
<style type="text/css" media="screen and (max-width:700px)">
	.media-css {
		margin-left: 170px !important;
	}


</style>

